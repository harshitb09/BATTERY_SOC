# -*- coding: utf-8 -*-
"""Untitled20.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PNvMdqdgdUn2PgmkRswdu527tgLgETds
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from tensorflow import keras
from tensorflow.keras import layers

# Load data from Excel file
file_path = 'Combined__A.xlsx'
try:
    df = pd.read_excel(file_path)
except FileNotFoundError:
    print("File not found. Please provide the correct file path.")
    exit(1)

# Assuming the columns in the Excel file are named 'Battery Voltage [V]', 'Battery Current [A]', 'Battery Temperature [°C]', and 'SoC [%]'
# Prepare features and target variable
X = df[['Battery Voltage [V]', 'Battery Current [A]', 'Battery Temperature [°C]']]  # Features
y = df['SoC [%]']  # Target variable

# Normalize features
scaler = MinMaxScaler()
X_normalized = scaler.fit_transform(X)
y_normalized = scaler.fit_transform(np.array(y).reshape(-1, 1))

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_normalized, y_normalized, test_size=0.2, random_state=42)

# Build the neural network model
model = keras.Sequential([
    layers.Dense(64, activation='relu', input_shape=(3,)),  # Input layer with 3 features
    layers.Dense(32, activation='tanh'),  # Hidden layer 1
    layers.Dense(16, activation='relu'),  # Hidden layer 2
    layers.Dense(8, activation='sigmoid'),  # Hidden layer 3
    layers.Dense(1)  # Output layer
])

model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(X_train, y_train, epochs=10, batch_size=32, verbose=2)

# Evaluate the model
mse = model.evaluate(X_test, y_test)
print(f"Mean Squared Error (MSE): {mse}")

# Save the trained model
model.save('neural_network_model.h5')
print('Model saved as neural_network_model.h5')

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from tensorflow import keras
from tensorflow.keras import layers

# Load data from Excel file
file_path = 'Combined__A.xlsx'
try:
    df = pd.read_excel(file_path)
except FileNotFoundError:
    print("File not found. Please provide the correct file path.")
    exit(1)

# Assuming the columns in the Excel file are named 'Battery Voltage [V]', 'Battery Current [A]', 'Battery Temperature [°C]', and 'SoC [%]'
# Prepare features and target variable
X = df[['Battery Voltage [V]', 'Battery Current [A]', 'Battery Temperature [°C]']]  # Features
y = df['SoC [%]']  # Target variable

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build the neural network model
model = keras.Sequential([
    layers.Dense(64, activation='relu', input_shape=(3,)),  # Input layer with 3 features
    layers.Dense(32, activation='tanh'),  # Hidden layer 1
    layers.Dense(16, activation='relu'),  # Hidden layer 2
    layers.Dense(8, activation='sigmoid'),  # Hidden layer 3
    layers.Dense(1)  # Output layer
])

model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(X_train, y_train, epochs=100, batch_size=32, verbose=2)

# Evaluate the model
mse = model.evaluate(X_test, y_test)
print(f"Mean Squared Error (MSE): {mse}")

# Save the trained model
model.save('neural_network_model.h5')
print('Model saved as neural_network_model.h5')

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from tensorflow import keras
from tensorflow.keras import layers

# Load data from Excel file
file_path = 'Combined__A.xlsx'
try:
    df = pd.read_excel(file_path)
except FileNotFoundError:
    print("File not found. Please provide the correct file path.")
    exit(1)

# Assuming the columns in the Excel file are named 'Battery Voltage [V]', 'Battery Current [A]', 'Battery Temperature [°C]', and 'SoC [%]'
# Prepare features and target variable
X = df[['Battery Voltage [V]', 'Battery Current [A]', 'Battery Temperature [°C]']]  # Features
y = df['SoC [%]']  # Target variable

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Reshape the input data for LSTM
X_train = X_train.values.reshape((X_train.shape[0], 1, X_train.shape[1]))  # Reshape for LSTM input
X_test = X_test.values.reshape((X_test.shape[0], 1, X_test.shape[1]))

# Build the LSTM model with 3 layers
model = keras.Sequential([
    layers.LSTM(64, return_sequences=True, input_shape=(1, 3)),  # LSTM layer 1 with 64 units
    layers.LSTM(32, return_sequences=True),  # LSTM layer 2 with 32 units
    layers.LSTM(16),  # LSTM layer 3 with 16 units
    layers.Dense(1)  # Output layer
])

model.compile(optimizer='adam', loss='mean_squared_error')

# Train the LSTM model
model.fit(X_train, y_train, epochs=1, batch_size=32, verbose=2)

# Evaluate the model
mse = model.evaluate(X_test, y_test)
print(f"Mean Squared Error (MSE): {mse}")

# Save the trained model
model.save('lstm_3_layer_model.h5')
print('Model saved as lstm_3_layer_model.h5')

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Load data from Excel file
file_path = 'Combined__A.xlsx'
try:
    df = pd.read_excel(file_path)
except FileNotFoundError:
    print("File not found. Please provide the correct file path.")
    exit(1)

# Assuming the columns in the Excel file are named 'Battery Voltage [V]', 'Battery Current [A]', 'Battery Temperature [°C]', and 'SoC [%]'
X = df[['Battery Voltage [V]', 'Battery Current [A]', 'Battery Temperature [°C]']]  # Features
y = df['SoC [%]']  # Target variable

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and fit the Linear Regression model
model_lr = LinearRegression()
model_lr.fit(X_train, y_train)

# Predicting SOC values using the trained model
predicted_soc_lr = model_lr.predict(X_test)

# Calculate Mean Squared Error (MSE)
mse_lr = mean_squared_error(y_test, predicted_soc_lr)
print(f"Linear Regression - Mean Squared Error (MSE): {mse_lr}")

from tensorflow import keras
from tensorflow.keras import layers
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Load data from Excel file
file_path = 'Combined__A.xlsx'
try:
    df = pd.read_excel(file_path)
except FileNotFoundError:
    print("File not found. Please provide the correct file path.")
    exit(1)

# Assuming the columns in the Excel file are named 'Battery Voltage [V]', 'Battery Current [A]', 'Battery Temperature [°C]', and 'SoC [%]'
X = df[['Battery Voltage [V]', 'Battery Current [A]', 'Battery Temperature [°C]']]  # Features
y = df['SoC [%]']  # Target variable

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and fit the Linear Regression model
model_lr = LinearRegression()
model_lr.fit(X_train, y_train)

# Predicting SOC values using the trained model
predicted_soc_lr = model_lr.predict(X_test)

# Calculate Mean Squared Error (MSE)
mse_lr = mean_squared_error(y_test, predicted_soc_lr)
print(f"Linear Regression - Mean Squared Error (MSE): {mse_lr}")


# Rest of the code remains similar to the neural network example provided earlier with changes in model architecture and evaluation.
# Use Sequential model and Dense layers to create a simple feedforward neural network.
# Train, evaluate, and save the model as shown in previous examples.

from tensorflow import keras
from tensorflow.keras import layers
from sklearn.model_selection import train_test_split
import pandas as pd

# Load data from Excel file
file_path = 'Combined__A.xlsx'
try:
    df = pd.read_excel(file_path)
except FileNotFoundError:
    print("File not found. Please provide the correct file path.")
    exit(1)

# Assuming the columns in the Excel file are named 'Battery Voltage [V]', 'Battery Current [A]', 'Battery Temperature [°C]', and 'SoC [%]'
X = df[['Battery Voltage [V]', 'Battery Current [A]', 'Battery Temperature [°C]']]  # Features
y = df['SoC [%]']  # Target variable

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build the neural network model
model_nn = keras.Sequential([
    layers.Dense(64, activation='relu', input_shape=(3,)),  # Input layer with 3 features
    layers.Dense(32, activation='tanh'),  # Hidden layer 1
    layers.Dense(1)  # Output layer
])

model_nn.compile(optimizer='adam', loss='mean_squared_error')

# Train the model for 100 epochs
model_nn.fit(X_train, y_train, epochs=100, batch_size=32, verbose=2)

# Evaluate the model
mse_nn = model_nn.evaluate(X_test, y_test)
print(f"Feedforward Neural Network - Mean Squared Error (MSE): {mse_nn}")

# Save the trained model
model_nn.save('feedforward_nn_model_100epochs.h5')
print('Feedforward Neural Network Model (100 epochs) saved as feedforward_nn_model_100epochs.h5')

from tensorflow import keras
from tensorflow.keras import layers
from sklearn.model_selection import train_test_split
import pandas as pd
import numpy as np

# Load data from Excel file
file_path = 'Combined__A.xlsx'
try:
    df = pd.read_excel(file_path)
except FileNotFoundError:
    print("File not found. Please provide the correct file path.")
    exit(1)

# Assuming the columns in the Excel file are named 'Battery Voltage [V]', 'Battery Current [A]', 'Battery Temperature [°C]', and 'SoC [%]'
X = df[['Battery Voltage [V]', 'Battery Current [A]', 'Battery Temperature [°C]']]  # Features
y = df['SoC [%]']  # Target variable

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Reshape the input data for LSTM
X_train = X_train.values.reshape((X_train.shape[0], 1, X_train.shape[1]))  # Reshape for LSTM input
X_test = X_test.values.reshape((X_test.shape[0], 1, X_test.shape[1]))

# Build the LSTM model
model_lstm = keras.Sequential([
    layers.LSTM(64, input_shape=(1, 3)),  # LSTM layer with 64 units
    layers.Dense(32, activation='tanh'),  # Additional dense layer
    layers.Dense(1)  # Output layer
])

model_lstm.compile(optimizer='adam', loss='mean_squared_error')

# Train the LSTM model for 100 epochs
model_lstm.fit(X_train, y_train, epochs=100, batch_size=32, verbose=2)

# Evaluate the model
mse_lstm = model_lstm.evaluate(X_test, y_test)
print(f"LSTM - Mean Squared Error (MSE): {mse_lstm}")

# Save the trained model
model_lstm.save('lstm_model_100epochs.h5')
print('LSTM Model (100 epochs) saved as lstm_model_100epochs.h5')